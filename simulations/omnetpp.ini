[General]
network = Eastleigh_5GNet
sim-time-limit = 60s

#==================# NOTES #==================#
#
# Bandwidth is specified by numerology & numBands; numBands is better described as numRBs.
# i.e. numerology = 0 => RB w/ 180KHz freq. slot
# and numBands = RBs = 25 => 180 KHz/RB * 25 RB = 4500 KHz ~= 5 MHz
# (as confirmed by SIMU5G collaborator in https://github.com/Unipisa/Simu5G/issues/29)
# specified in both CarrierAggregation and BackgroundCell(Scheduler), so use wildcards when specifying
#
#
#--------# Currently Requires Clarifications #--------#
# CarrierAggregation and Backgroundcell(Scheduler) have the same default (2GHz) while ChannelControl
# has a different default (2.4GHz). How are these different?
#
# Why do channel models have a parameter for component carrier index?
# * Somewhat of an explanation exists at IV B. 4) in https://ieeexplore.ieee.org/document/9211504
#
# Why do **.eNodeBTxPower and *.gnb*.txPower have different defaults?
#
# Not sure how to accomplish beamforming
#
#=============================================#

# Interesting stats
# averageCqiDl:mean (Channel quality indicator)

############### Cell Network ##################

*.bgCell.*.isNr = true
*.bgCell.*.scenario = "SUBURBAN_MACROCELL"

*.bgCell.*.carrierFrequency = 45GHz # default = 2 GHz
*.carrierAggregation.**.carrierFrequency = 45GHz  # default = 2 GHz
**.numerologyIndex = 3
**.numBands = 66
**.useTdd = true
**.tddNumSymbolsDl = 10
**.tddNumSymbolsUl = 4 # No guard timing - never have DL->UL in scenario 

# Channels
*.channelControl.alpha = 0 # Path loss coefficient
*.channelControl.numChannels = 20
*.channelControl.carrierFrequency = 45GHz

**.shadowing = false
**.targetBler = default
**.thermalNoise = -93.80
**.ue_noise_figure = 7
**.bs_noise_figure = 0
**.fading = false
**.*interference = false
**.antennaGainUe = 0 #default(0);
**.antennGainEnB = 0 #default(18);
**.building_height = 7 # default=20

############### Equipment (UE/BS) ##################

# Base station parameters
#**.eNodeBTxPower = default
*.gnb*.cellularNic.channelModel[*].nodeb_height = default

# User Equipment parameters
**.ueTxPower = default
*.nrUe*.cellularNic.channelModel[*].nodeb_height = default

# *.nrUe*.mobility.typename = "" # If mobile UE is desirable. Default is stationary
# UEs associates to the best BS at the beginning of the simulation
*.nrUe*.macCellId = 0
*.nrUe*.masterId = 0
*.nrUe*.nrMacCellId = 1
*.nrUe*.nrMasterId = 1
**.dynamicCellAssociation = true
**.enableHandover = true

############### SCTP configuration ##################

**.sctp.nagleEnabled = false       	# if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false	# severely clutters simulation

############### Floorplan & Positioning #################

**.mobility.constraintAreaMaxX = 700m
**.mobility.constraintAreaMaxY = 700m
**.mobility.constraintAreaMaxZ = 0m

**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m

#*.nrUe*.mobility.initFromDisplayString = false
#*.nrUe*.mobility.updateFromDisplayString = false
#*.nrUe0.mobility.initialX = 588.12m # gnb8 = "p=588.12,605.01996"
#*.nrUe0.mobility.initialY = 605.01996m
#*.nrUe1.mobility.initialX = 588.12m # gnb2 = "588.12,106.46999"
#*.nrUe1.mobility.initialY = 106.46999m

############### X2 configuration #################

# one x2App per peering node
*.gnb0.numX2Apps = 3
*.gnb1.numX2Apps = 3
*.gnb2.numX2Apps = 3
*.gnb3.numX2Apps = 3
*.gnb4.numX2Apps = 8
*.gnb5.numX2Apps = 3
*.gnb6.numX2Apps = 3
*.gnb7.numX2Apps = 3
*.gnb8.numX2Apps = 3

*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

# gnb0 peers
*.gnb0.x2App[0].client.connectAddress = "gnb1%x2ppp1"
*.gnb0.x2App[1].client.connectAddress = "gnb4%x2ppp0"
*.gnb0.x2App[2].client.connectAddress = "gnb3%x2ppp1"

# gnb1 peers
*.gnb1.x2App[0].client.connectAddress = "gnb0%x2ppp1"
*.gnb1.x2App[1].client.connectAddress = "gnb4%x2ppp1"
*.gnb1.x2App[2].client.connectAddress = "gnb2%x2ppp1"

# gnb2 peers
*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp2"
*.gnb2.x2App[1].client.connectAddress = "gnb4%x2ppp2"
*.gnb2.x2App[2].client.connectAddress = "gnb5%x2ppp1"

# gnb3 peers
*.gnb3.x2App[0].client.connectAddress = "gnb0%x2ppp2"
*.gnb3.x2App[1].client.connectAddress = "gnb4%x2ppp3"
*.gnb3.x2App[2].client.connectAddress = "gnb6%x2ppp1"

# gnb4 peers
*.gnb4.x2App[0].client.connectAddress = "gnb0%x2ppp0"
*.gnb4.x2App[1].client.connectAddress = "gnb1%x2ppp0"
*.gnb4.x2App[2].client.connectAddress = "gnb2%x2ppp0"
*.gnb4.x2App[3].client.connectAddress = "gnb3%x2ppp0"
*.gnb4.x2App[4].client.connectAddress = "gnb5%x2ppp0"
*.gnb4.x2App[5].client.connectAddress = "gnb6%x2ppp0"
*.gnb4.x2App[6].client.connectAddress = "gnb7%x2ppp0"
*.gnb4.x2App[7].client.connectAddress = "gnb8%x2ppp0"

# gnb5 peers
*.gnb5.x2App[0].client.connectAddress = "gnb2%x2ppp2"
*.gnb5.x2App[1].client.connectAddress = "gnb4%x2ppp4"
*.gnb5.x2App[2].client.connectAddress = "gnb8%x2ppp1"

# gnb6 peers
*.gnb6.x2App[0].client.connectAddress = "gnb3%x2ppp2"
*.gnb6.x2App[1].client.connectAddress = "gnb4%x2ppp5"
*.gnb6.x2App[2].client.connectAddress = "gnb7%x2ppp1"

# gnb7 peers
*.gnb7.x2App[0].client.connectAddress = "gnb6%x2ppp2"
*.gnb7.x2App[1].client.connectAddress = "gnb4%x2ppp6"
*.gnb7.x2App[2].client.connectAddress = "gnb8%x2ppp2"

# gnb8 peers
*.gnb8.x2App[0].client.connectAddress = "gnb5%x2ppp2"
*.gnb8.x2App[1].client.connectAddress = "gnb4%x2ppp7"
*.gnb8.x2App[2].client.connectAddress = "gnb7%x2ppp2"

############### Statistics #################

**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP

############### Apps #################

*.nrUe*.numApps = 1

[Config CBR-DL]

*.nrUe*.app[*].typename = "CbrReceiver"
*.nrUe*.app[*].localPort = 3000

*.server.numApps = 3
*.server.app[*].typename = "CbrSender"
*.nrUe*.app[*].PacketSize = int(uniform(20, 100))
*.server.app[*].sampling_time = 0.02s
*.server.app[*].destAddress = "nrUe" + string(ancestorIndex(0))
*.server.app[*].destPort = 3000
*.server.app[*].localPort = 3088 + ancestorIndex(0) 
*.server.app[*].startTime = uniform(0s, 0.02s)
*.server.app[*].finishTime = uniform(19.9s, 19.92s)

[Config UDP-VideoStream]
**.ueTxPower = 46 # FR2 has poor uplink coverage
*.nrUe*.app[*].typename = "UdpVideoStreamClient"
*.nrUe*.app[*].localPort = 3000
*.nrUe*.app[*].serverAddress = "server" 
*.nrUe*.app[*].serverPort = 3088
*.nrUe0.app[*].startTime = 1s
*.nrUe1.app[*].startTime = 1.0000001s
*.nrUe2.app[*].startTime = 1.0000001s

*.server.numApps = 1
*.server.app[*].typename = "UdpVideoStreamServer"
*.server.app[*].packetLen = 1200B # 1.2KB - good IP packet size
*.server.app[*].sendInterval = 32e-6s # 32us send interval => w/ packet size = 1.2KB => 300Mbps
*.server.app[*].videoSize = 2e9B # 2GB ~ 1min of 8K video => w/ 300Mbps, download time = 53.33s
*.server.app[*].localPort = 3088

[Config Beamforming]
# Prx = Ptx - Patt
# SINR = Prx - Pn
# => Patt = Ptx - SINR - Pn
# => Prx_PHY = Ptx - Patt
*.gnb8.**.eNodeBTxPower = 59.12695298 # Prx_PHY = -55.67362281 (Actual = -55.66873002) => Err = -4.89279e-3 = %?
*.gnb2.**.eNodeBTxPower = 65.23362807 # Prx_PHY = -61.69422272 (Actual = -61.68932993) => Err = -4.89279e-3 = %?
*.gnb7.**.eNodeBTxPower = 68.51115789 # Prx_PHY = -77.25724773 (Actual = ??) => Err = ?? = %?

[Config No-Beamforming]
# Prx = Ptx - Patt
# SINR = Prx - Pn
# => Patt = Ptx - SINR - Pn
# => Prx_PHY = Ptx - Patt
*.gnb8.**.eNodeBTxPower = 41.06515324 # Prx_PHY = -73.73542255 (Actual = -73.73052976) => Err = -4.89279e-3 = %?
*.gnb2.**.eNodeBTxPower = 47.17182833 # Prx_PHY = -79.75602246 (Actual = -79.75112967) => Err = -4.89279e-3 = %?
*.gnb7.**.eNodeBTxPower = 50.44935815 # Prx_PHY = -83.27784764 (Actual = ??) => Err = ??

[Config Beamforming-CBR-DL]
extends = CBR-DL, Beamforming

[Config No-Beamforming-CBR-DL]
extends = CBR-DL, No-Beamforming

[Config Beamforming-UDP-VideoStream]
extends = UDP-VideoStream, Beamforming

[Config No-Beamforming-UDP-VideoStream]
extends = UDP-VideoStream, No-Beamforming

[Config Recording-Config]
extends = Beamforming-UDP-VideoStream
**.vector-recording = false
**.scalar-recording = false
